"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMiniPlugin = exports.internalBuildApp = exports.buildApp = exports.run = void 0;
const output_1 = __importDefault(require("./utils/output"));
const types_1 = require("@remax/types");
const API_1 = __importDefault(require("../API"));
const version = require('remax/package.json').version;
function run(options, api) {
    process.env.NODE_ENV = process.env.NODE_ENV || 'development';
    api.loadBuiltinPlugins(options);
    api.onBuildStart(options);
    if (options.target === types_1.Platform.web) {
        // ÂÖºÂÆπ herbox ÊâÄ‰ª•Áî® require
        const WebBuilder = require('./WebBuilder').default;
        return new WebBuilder(api, options).run();
    }
    else {
        const MiniBuilder = require('./MiniBuilder').default;
        return new MiniBuilder(api, options).run();
    }
}
exports.run = run;
function buildApp(options) {
    const api = new API_1.default();
    api.registerPlugins(options.plugins);
    return internalBuildApp(options, api);
}
exports.buildApp = buildApp;
function internalBuildApp(options, api) {
    const { target } = options;
    process.env.REMAX_PLATFORM = target;
    output_1.default.message(`\n‚å®Ô∏è  remax v${version}\n`, 'green');
    const result = run(options, api);
    return result;
}
exports.internalBuildApp = internalBuildApp;
function buildMiniPlugin(options) {
    process.env.NODE_ENV = process.env.NODE_ENV || 'development';
    const { target } = options;
    process.env.REMAX_PLATFORM = target;
    output_1.default.message(`\n‚å®Ô∏è  remax v${version}\n`, 'green');
    output_1.default.message(`üî® ÊûÑÂª∫Êèí‰ª∂`, 'blue');
    const api = new API_1.default();
    api.registerPlugins([]);
    const MiniPluginBuilder = require('./MiniPluginBuilder').default;
    return new MiniPluginBuilder(api, options).run();
}
exports.buildMiniPlugin = buildMiniPlugin;
