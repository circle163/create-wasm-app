import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';
import { View } from 'remax/one';
import classNames from 'classnames';
import Loading from '../loading';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('progress_bar');

var ProgressBar = function ProgressBar(props) {
  var _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      value = props.value,
      style = props.style;

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      move = _React$useState2[0],
      setMove = _React$useState2[1];

  React.useEffect(function () {
    if (data.length > 1 && !move) {
      setTimeout(function () {
        setMove(true);
      }, 100);
    }
  }, [data]);
  var curIndex = -1;
  data.forEach(function (item, index) {
    if (value === item.key) {
      curIndex = index;
    }
  });
  var moveX = data.length > 0 ? 100 / data.length * (curIndex + 1) : 100;
  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls,
    style: style
  }, data === null || data === void 0 ? void 0 : data.map(function (item, index) {
    var _classNames;

    return /*#__PURE__*/React.createElement(View, {
      key: item.key,
      className: classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-node"), true), _defineProperty(_classNames, "".concat(prefixCls, "-node_first"), index === 0), _defineProperty(_classNames, "".concat(prefixCls, "-node_last"), index === curIndex), _defineProperty(_classNames, "".concat(prefixCls, "-node_active"), index <= curIndex), _classNames))
    }, item.value);
  }), data.length === 0 ? /*#__PURE__*/React.createElement(Loading, {
    type: "gap",
    gapColor: "#E8E8E8"
  }) : null, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-process"),
    style: {
      width: move ? "".concat(moveX, "%") : 0,
      transition: "width ".concat((curIndex + 1) * 0.3, "s ease-in")
    }
  }));
};

export default ProgressBar;