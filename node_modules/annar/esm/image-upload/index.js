import _regeneratorRuntime from "@babel/runtime/regenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import * as React from 'react';
import { View, Image } from 'remax/one';
import { previewImage, chooseImage } from '../one';
import { sync, to, deepClone } from '../_util';
import { getPrefixCls } from '../common';
import Icon from '../icon';
var prefixCls = getPrefixCls('image-upload');

var ImageUpload = function ImageUpload(props) {
  var _props$files = props.files,
      files = _props$files === void 0 ? [] : _props$files,
      onChange = props.onChange,
      multiple = props.multiple,
      multipleCount = props.multipleCount,
      sizeType = props.sizeType,
      sourceType = props.sourceType,
      _props$deletable = props.deletable,
      deletable = _props$deletable === void 0 ? true : _props$deletable,
      disabled = props.disabled,
      maxCount = props.maxCount,
      children = props.children;

  var handleClickImage = function handleClickImage(index) {
    var urls = files;
    var current = index;

    if (typeof files[index] !== 'string') {
      urls = files.map(function (i) {
        return i.url;
      });
    }

    previewImage({
      urls: urls,
      current: current,
      // @ts-ignore
      enablesavephoto: true,
      enableShowPhotoDownload: true
    });
  };

  var handleAdd = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var params, _yield$to, _yield$to2, errc, resc, targetFiles, newFiles;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!disabled) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              params = {};

              if (multiple) {
                params.multiple = true;
                params.count = 99;
              }

              if (multipleCount) {
                params.count = multipleCount;
              }

              if (sizeType) {
                params.sizeType = sizeType;
              }

              if (sourceType) {
                params.sourceType = sourceType;
              }

              _context.next = 9;
              return to(sync(chooseImage, params));

            case 9:
              _yield$to = _context.sent;
              _yield$to2 = _slicedToArray(_yield$to, 2);
              errc = _yield$to2[0];
              resc = _yield$to2[1];

              if (!errc) {
                _context.next = 15;
                break;
              }

              return _context.abrupt("return");

            case 15:
              targetFiles = resc.filePaths ? resc.filePaths.map(function (i) {
                return i;
              }) : resc.tempFilePaths.map(function (i) {
                return i;
              });
              newFiles = files.concat(targetFiles);
              onChange === null || onChange === void 0 ? void 0 : onChange(newFiles);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleAdd() {
      return _ref.apply(this, arguments);
    };
  }();

  var handleDelete = function handleDelete(e, index) {
    e.stopPropagation();
    var newValue = deepClone(files);
    newValue.splice(index, 1);
    newValue = newValue.map(function (item, index) {
      var newItem = item;

      if (typeof newItem === 'string') {
        return newItem;
      }

      newItem.key = String(index);
      return newItem;
    });
    onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  };

  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls
  }, files.map(function (item, index) {
    return /*#__PURE__*/React.createElement(View, {
      key: item.key || index,
      className: "".concat(prefixCls, "-item"),
      onTap: function onTap() {
        return handleClickImage(index);
      }
    }, deletable ? /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-item-delete")
    }, /*#__PURE__*/React.createElement(View, {
      style: {
        height: '24px'
      },
      onTap: function onTap(e) {
        handleDelete(e, index);
      }
    }, /*#__PURE__*/React.createElement(Icon, {
      type: "close",
      size: "24px",
      color: "#FDFFFD",
      style: {
        width: '24px',
        height: '24px',
        verticalAlign: 'text-top'
      }
    }))) : null, /*#__PURE__*/React.createElement(Image, {
      mode: "widthFix",
      src: item.url || item
    }));
  }), !maxCount || files.length < maxCount ? /*#__PURE__*/React.createElement(View, {
    onTap: handleAdd
  }, children !== null && children !== void 0 ? children : /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-add")
  }, /*#__PURE__*/React.createElement(Icon, {
    type: "add",
    size: "48px",
    color: "#BABEC6"
  }))) : null);
};

export default ImageUpload;