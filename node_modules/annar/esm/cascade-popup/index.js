import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { View } from 'remax/one';
import Cascade from '../cascade';
import Loading from '../loading';
import Popup from '../popup';
import Icon from '../icon';
import FormValue from '../form-value';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('cascade-popup');

var CascadePopup = function CascadePopup(props) {
  var value = props.value,
      text = props.text,
      disabled = props.disabled,
      placeholder = props.placeholder,
      options = props.options,
      onChange = props.onChange;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];

  var handleTap = function handleTap() {
    if (disabled) {
      return;
    }

    setShow(true);
  };

  var handleClose = function handleClose() {
    setShow(false);
  };

  var handleChange = function handleChange(v, s, isLast) {
    onChange(v, s);

    if (isLast) {
      setShow(false);
    }
  };

  if (!options || options.length === 0) {
    return /*#__PURE__*/React.createElement(View, {
      className: prefixCls
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-loading")
    }, /*#__PURE__*/React.createElement(Loading, null)));
  }

  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-formitem"),
    onTap: handleTap
  }, /*#__PURE__*/React.createElement(FormValue, {
    placeholder: placeholder
  }, text || (value === null || value === void 0 ? void 0 : value.map(function (i) {
    return i.name;
  }).join(' ')))), /*#__PURE__*/React.createElement(Popup, {
    position: "bottom",
    open: show
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container-header")
  }, /*#__PURE__*/React.createElement(View, null, "\u8BF7\u9009\u62E9"), /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container-header-close"),
    onTap: handleClose
  }, /*#__PURE__*/React.createElement(Icon, {
    type: "close",
    color: "#999"
  }))), /*#__PURE__*/React.createElement(Cascade, _extends({}, props, {
    onChange: handleChange
  })))));
};

export default CascadePopup;