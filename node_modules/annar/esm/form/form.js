import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useState, useMemo } from 'react';
import { Form } from 'remax/one';
import classNames from 'classnames';
import { FormContext } from './context';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('form');

var getItemRulesObject = function getItemRulesObject(children) {
  var rules = React.Children.toArray(children).map(function (i) {
    var _i$props, _i$props2;

    return {
      name: i === null || i === void 0 ? void 0 : (_i$props = i.props) === null || _i$props === void 0 ? void 0 : _i$props.name,
      rules: i === null || i === void 0 ? void 0 : (_i$props2 = i.props) === null || _i$props2 === void 0 ? void 0 : _i$props2.rules
    };
  });
  var itemRulesObj = {};
  var nullValuesObj = {};
  rules.forEach(function (i) {
    if (i.name && i.rules && Array.isArray(i.rules)) {
      itemRulesObj[i.name] = i.rules;
      nullValuesObj[i.name] = undefined;
    }
  });
  return [itemRulesObj, nullValuesObj];
};

var AnnarForm = function AnnarForm(props) {
  var initialValues = props.initialValues,
      children = props.children,
      onFinish = props.onFinish,
      onFinishFailed = props.onFinishFailed,
      onReset = props.onReset;

  var _getItemRulesObject = getItemRulesObject(children),
      _getItemRulesObject2 = _slicedToArray(_getItemRulesObject, 2),
      itemRulesObj = _getItemRulesObject2[0],
      nullValuesObj = _getItemRulesObject2[1];

  var _useState = useState(Object.assign({}, nullValuesObj, initialValues)),
      _useState2 = _slicedToArray(_useState, 2),
      values = _useState2[0],
      setValues = _useState2[1];

  var _useState3 = useState(nullValuesObj),
      _useState4 = _slicedToArray(_useState3, 2),
      errors = _useState4[0],
      setErrors = _useState4[1];

  var handleSubmit = function handleSubmit(e) {
    var _e$preventDefault, _e$stopPropagation;

    e === null || e === void 0 ? void 0 : (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
    e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
    var errorFlag = false;
    var errorState = {};
    var errorFields = {};
    var names = Object.keys(values);

    for (var i = 0; i < names.length; i += 1) {
      var _name = names[i];
      var value = values[_name];
      var rules = itemRulesObj[_name];

      if (rules) {
        for (var j = 0; j < rules.length; j += 1) {
          var rule = rules[j] || {};
          var required = rule.required,
              pattern = rule.pattern,
              validator = rule.validator,
              _rule$message = rule.message,
              message = _rule$message === void 0 ? "".concat(_name, " is required") : _rule$message;

          if (required) {
            if (!value && value !== 0) {
              errorState[_name] = {
                error: true,
                message: message
              };
              errorFields[_name] = value;
              errorFlag = true;
              break;
            }
          }

          if (pattern) {
            var isPass = pattern.test(value);

            if (!isPass) {
              errorState[_name] = {
                error: true,
                message: message
              };
              errorFields[_name] = value;
              errorFlag = true;
              break;
            }
          }

          if (validator && typeof validator === 'function') {
            var result = validator(value);

            if (!result) {
              errorState[_name] = {
                error: true,
                message: message
              };
              errorFields[_name] = value;
              errorFlag = true;
              break;
            }
          }
        }
      }
    }

    if (errorFlag) {
      setErrors(_objectSpread(_objectSpread({}, nullValuesObj), errorState));
      onFinishFailed === null || onFinishFailed === void 0 ? void 0 : onFinishFailed(values, errorFields);
      return;
    }

    if (!errorFlag) {
      setErrors(nullValuesObj);
    }

    onFinish === null || onFinish === void 0 ? void 0 : onFinish(values);
  };

  var handleChange = function handleChange(e, name) {
    var t = e.target;
    setValues(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, t.value));
    });
  };

  var handleChangeError = function handleChangeError(v, name) {
    setErrors(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, v));
    });
  };

  var providerValue = useMemo(function () {
    return {
      values: values,
      errors: errors,
      onChange: handleChange,
      onChangeError: handleChangeError
    };
  }, [values, errors]);
  return /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: providerValue
  }, /*#__PURE__*/React.createElement(Form, {
    className: classNames(prefixCls),
    onSubmit: handleSubmit,
    onReset: onReset
  }, children));
};

export default AnnarForm;