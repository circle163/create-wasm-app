import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useRef, useState } from 'react';
import { View, Text } from 'remax/one';
import { ScrollView } from '../one';
import classNames from 'classnames';
import Icon from '../icon';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('cascade');

var getMatchLevelOptions = function getMatchLevelOptions(value, level, data) {
  var r = null;
  var currentLevel = level - 1;

  for (var i = 0; i < data.length; i += 1) {
    var item = data[i];

    if (currentLevel === 0) {
      if (value === item.value) {
        r = data;
      }
    }

    if (currentLevel > 0) {
      if (item.children) {
        r = getMatchLevelOptions(value, currentLevel, item.children);
      }
    }

    if (r) {
      return r;
    }
  }

  return r;
};

var getSelectedOptions = function getSelectedOptions(value, options) {
  if (!Array.isArray(value) || !Array.isArray(options)) {
    return [];
  }

  var level = 0;
  var selectedOptions = [];

  var recursion = function recursion(levelOptions) {
    for (var i = 0; i < levelOptions.length; i += 1) {
      var option = levelOptions[i];

      if (option.value === value[level]) {
        selectedOptions.push(option);
        level += 1;

        if (selectedOptions.length === value.length) {
          return selectedOptions;
        } else if (selectedOptions.length < value.length) {
          return recursion(option.children || []);
        }
      }
    }

    return selectedOptions;
  };

  return recursion(options);
};

var Cascade = function Cascade(props) {
  var _classNames;

  var name = props.name,
      _props$value = props.value,
      value = _props$value === void 0 ? [] : _props$value,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      changeOnSelect = props.changeOnSelect,
      _props$height = props.height,
      height = _props$height === void 0 ? '80vh' : _props$height,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      prompt = props.prompt,
      onChange = props.onChange;

  var _useState = useState(options),
      _useState2 = _slicedToArray(_useState, 2),
      levelOptions = _useState2[0],
      setLevelOptions = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      scrollTop = _useState4[0],
      setScrollTop = _useState4[1];

  var _useState5 = useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      localValue = _useState6[0],
      setLocalValue = _useState6[1];

  var rechoose = useRef(false);
  var val = changeOnSelect ? value : localValue;
  var selectedOptions = getSelectedOptions(val, options); // useEffect(() => {
  //   if (options && options.length > 0) {
  //     setLevelOptions(options);
  //   }
  // }, [options]) // 无法使用此 useEffect，使用后会报错。

  var handleClick = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(i) {
      var nextValue, nextSelectedOption, lastIndex, lastSelectedOption, _isLast;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nextValue = [];
              nextSelectedOption = [];
              lastIndex = val.length - 1;
              lastSelectedOption = selectedOptions[lastIndex] || {};

              if (val.length > 0 && (!lastSelectedOption.children || lastSelectedOption.children.length === 0)) {
                nextValue = [].concat(_toConsumableArray(val.slice(0, lastIndex)), [i.value]);
                nextSelectedOption = [].concat(_toConsumableArray(selectedOptions.slice(0, lastIndex)), [i]);
              } else if (val.length > 0 && rechoose.current) {
                nextValue = [].concat(_toConsumableArray(val.slice(0, lastIndex)), [i.value]);
                nextSelectedOption = [].concat(_toConsumableArray(selectedOptions.slice(0, lastIndex)), [i]);
              } else {
                nextValue = [].concat(_toConsumableArray(val), [i.value]);
                nextSelectedOption = [].concat(_toConsumableArray(selectedOptions), [i]);
              }

              if (changeOnSelect) {
                _isLast = false;

                if (!Array.isArray(i.children) || i.children.length === 0) {
                  _isLast = true;
                }

                onChange(nextValue, nextSelectedOption, _isLast);
              }

              if (!changeOnSelect) {
                if (!Array.isArray(i.children) || i.children.length === 0) {
                  setLocalValue(nextValue);
                  onChange(nextValue, nextSelectedOption, true);
                } else {
                  setLocalValue(nextValue);
                }
              }

              rechoose.current = false;
              setScrollTop(function (top) {
                return top === 0 ? 1 : 0;
              });

              if (Array.isArray(i.children) && i.children.length > 0) {
                setLevelOptions(i.children);
              }

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleClick(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var handleReChoose = function handleReChoose(item, index) {
    rechoose.current = true;

    if (changeOnSelect) {
      onChange(val.slice(0, index + 1));
    }

    if (!changeOnSelect) {
      setLocalValue(val.slice(0, index + 1));
    }

    setLevelOptions(getMatchLevelOptions(item.value, index + 1, options));
    setScrollTop(function (top) {
      return top === 0 ? 1 : 0;
    });
  };

  var h = val.length > 1 ? 90 * val.length + 40 - 30 : 130;
  return /*#__PURE__*/React.createElement(View, {
    className: classNames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, className, true), _classNames)),
    style: {
      height: height
    }
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-selected")
  }, selectedOptions.map(function (item, index) {
    return /*#__PURE__*/React.createElement(View, {
      key: item.value,
      className: "".concat(prefixCls, "-step"),
      onTap: function onTap() {
        handleReChoose(item, index);
      }
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-line")
    }, index === val.length - 1 ? null : /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-line-active")
    }), /*#__PURE__*/React.createElement(Text, {
      className: "".concat(prefixCls, "-step-dot")
    })), /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-container")
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-content")
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-left")
    }, item.text), /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-right")
    }, /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-right-text")
    }, prompt === null || prompt === void 0 ? void 0 : prompt(index)), /*#__PURE__*/React.createElement(View, {
      className: "".concat(prefixCls, "-step-right-arrow")
    }, /*#__PURE__*/React.createElement(Icon, {
      type: "right",
      size: "24px",
      color: "#999"
    }))))));
  })), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(ScrollView, {
    scrollY: true,
    className: "".concat(prefixCls, "-showed"),
    scrollTop: scrollTop,
    style: {
      height: "calc(".concat(height, " - ").concat(h + 80, "px)")
    }
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-showed-title")
  }, "\u9009\u62E9".concat(name)), levelOptions === null || levelOptions === void 0 ? void 0 : levelOptions.map(function (i) {
    return /*#__PURE__*/React.createElement(View, {
      key: i.value,
      className: "".concat(prefixCls, "-showed-category"),
      onTap: function onTap() {
        handleClick(i);
      }
    }, i.text);
  }))));
};

export default Cascade;