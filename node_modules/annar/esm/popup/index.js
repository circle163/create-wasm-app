import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import { View } from 'remax/one';
import classNames from 'classnames';
import Mask from '../mask';
import Icon from '../icon';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('popup');

var Popup = function Popup(props) {
  var _classNames;

  var _props$open = props.open,
      open = _props$open === void 0 ? false : _props$open,
      children = props.children,
      onClose = props.onClose,
      closeable = props.closeable,
      title = props.title,
      _props$position = props.position,
      position = _props$position === void 0 ? 'center' : _props$position,
      style = props.style,
      _props$mask = props.mask,
      mask = _props$mask === void 0 ? true : _props$mask,
      square = props.square,
      curve = props.curve,
      transparent = props.transparent;

  var handleClickMask = function handleClickMask() {
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };

  var classes = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-container"), true), _defineProperty(_classNames, "".concat(prefixCls, "-container-").concat(position), position), _defineProperty(_classNames, "".concat(prefixCls, "-container-ease"), curve === 'ease'), _defineProperty(_classNames, "".concat(prefixCls, "-container-square"), square), _defineProperty(_classNames, "".concat(prefixCls, "-container-active"), open), _defineProperty(_classNames, "".concat(prefixCls, "-container-transparent"), transparent), _classNames));
  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls
  }, /*#__PURE__*/React.createElement(View, {
    className: classes,
    style: style
  }, title ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container-title")
  }, title) : null, children, closeable ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container-close"),
    onTap: function onTap() {
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    type: "close",
    size: "40px",
    color: "#999"
  })) : null), mask ? /*#__PURE__*/React.createElement(Mask, {
    show: open,
    onTap: handleClickMask
  }) : null);
};

export default Popup;