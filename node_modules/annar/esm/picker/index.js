import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useRef } from 'react';
import { View } from 'remax/one';
import Popup from '../popup';
import PickerView from '../picker-view';
import PickerViewColumn from '../picker-view-column';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('picker');

var Picker = function Picker(props) {
  var _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      range = props.range,
      _props$rangeKey = props.rangeKey,
      rangeKey = _props$rangeKey === void 0 ? 'text' : _props$rangeKey,
      disabled = props.disabled,
      children = props.children,
      onChange = props.onChange;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var val = useRef(value < 0 ? 0 : value);

  var handleTap = function handleTap() {
    if (disabled) {
      return;
    }

    setOpen(function (state) {
      return !state;
    });
  };

  var handleOK = function handleOK(e) {
    onChange === null || onChange === void 0 ? void 0 : onChange(val.current, e);
    setOpen(false);
  };

  var handleChangeColumn = function handleChangeColumn(multiple, v, index) {
    if (multiple) {
      val.current = _toConsumableArray(Array.isArray(val.current) ? val.current : [val.current]);
      val.current[index] = v;
      return;
    }

    val.current = v;
  };

  var multiple = false;

  if (Array.isArray(range === null || range === void 0 ? void 0 : range[0])) {
    multiple = true;
  }

  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls
  }, /*#__PURE__*/React.createElement(View, {
    onTap: handleTap
  }, children), /*#__PURE__*/React.createElement(Popup, {
    position: "bottom",
    open: open,
    onClose: function onClose() {
      return setOpen(false);
    }
  }, /*#__PURE__*/React.createElement(PickerView, {
    onOK: handleOK,
    onCancel: function onCancel() {
      return setOpen(false);
    }
  }, multiple ? range === null || range === void 0 ? void 0 : range.map(function (columnData, index) {
    return /*#__PURE__*/React.createElement(PickerViewColumn, {
      key: index,
      value: value[index],
      options: columnData,
      optionsKey: rangeKey,
      onChange: function onChange(v) {
        return handleChangeColumn(true, v, index);
      }
    });
  }) : /*#__PURE__*/React.createElement(PickerViewColumn, {
    value: value,
    options: range,
    optionsKey: rangeKey,
    onChange: function onChange(v) {
      return handleChangeColumn(false, v);
    }
  }))));
};

export default Picker;