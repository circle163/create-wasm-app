import _typeof from "@babel/runtime/helpers/esm/typeof";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect } from 'react';
import { View } from 'remax/one';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('picker-view-column');
var heightUnit = 44;

var PickerViewColumn = function PickerViewColumn(props) {
  var _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$optionsKey = props.optionsKey,
      optionsKey = _props$optionsKey === void 0 ? 'text' : _props$optionsKey,
      onChange = props.onChange;

  var _useState = useState(heightUnit * 2),
      _useState2 = _slicedToArray(_useState, 2),
      initial = _useState2[0],
      setInitial = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      start = _useState4[0],
      setStart = _useState4[1];

  var _useState5 = useState(initial),
      _useState6 = _slicedToArray(_useState5, 2),
      y = _useState6[0],
      setY = _useState6[1];

  var _useState7 = useState(0),
      _useState8 = _slicedToArray(_useState7, 2),
      columnHeight = _useState8[0],
      setColumnHeight = _useState8[1];

  var _useState9 = useState(false),
      _useState10 = _slicedToArray(_useState9, 2),
      isTransition = _useState10[0],
      setIsTransition = _useState10[1];

  useEffect(function () {
    setColumnHeight(options.length * heightUnit);
  }, [options]);
  useEffect(function () {
    if (!value || value <= 0) {
      setY(heightUnit * 2);
      return;
    }

    setY(-heightUnit * value + heightUnit * 2);
  }, [value]);

  var handleTouchStart = function handleTouchStart(e) {
    var _e$preventDefault;

    (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
    setIsTransition(false);
    setStart(e.touches[0].clientY);
  };

  var handleTouchMove = function handleTouchMove(e) {
    var _e$preventDefault2;

    (_e$preventDefault2 = e.preventDefault) === null || _e$preventDefault2 === void 0 ? void 0 : _e$preventDefault2.call(e);
    var diff = e.touches[0].clientY - start;
    var updateY = diff + initial;

    if (updateY < -columnHeight + heightUnit * 2) {
      setY(-columnHeight + heightUnit * 2);
      return;
    }

    if (updateY > heightUnit * 3) {
      setY(heightUnit * 3);
      return;
    }

    setY(updateY);
  };

  var handleTouchEnd = function handleTouchEnd(e) {
    var _e$preventDefault3;

    (_e$preventDefault3 = e.preventDefault) === null || _e$preventDefault3 === void 0 ? void 0 : _e$preventDefault3.call(e);

    if (y < -columnHeight + heightUnit * 3) {
      var val = -columnHeight + heightUnit * 3;
      setY(val);
      setInitial(val);
      setIsTransition(true);
      var v = Math.floor((val - heightUnit * 2) / -heightUnit);
      onChange === null || onChange === void 0 ? void 0 : onChange(v);
      return;
    }

    if (y > heightUnit * 2) {
      var _val = heightUnit * 2;

      setY(_val);
      setInitial(_val);
      setIsTransition(true);

      var _v = Math.floor((_val - heightUnit * 2) / -heightUnit);

      onChange === null || onChange === void 0 ? void 0 : onChange(_v);
      return;
    }

    if (y % heightUnit !== 0) {
      var r = Math.round(y / heightUnit) - Math.floor(y / heightUnit);
      var _val2 = 0;

      if (r === 1) {
        _val2 = Math.ceil(y / heightUnit) * heightUnit;
      } else {
        _val2 = Math.floor(y / heightUnit) * heightUnit;
      }

      setY(_val2);
      setInitial(_val2);
      setIsTransition(true);

      var _v2 = Math.floor((_val2 - heightUnit * 2) / -heightUnit);

      onChange === null || onChange === void 0 ? void 0 : onChange(_v2);
      return;
    }

    setInitial(y);
  };

  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-items"),
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd,
    style: {
      transform: "translate3d(0, ".concat(y, "PX, 0)"),
      transition: "".concat(isTransition ? 'transform' : 'none', " 0.2s cubic-bezier(0.645, 0.045, 0.355, 1)")
    }
  }, options === null || options === void 0 ? void 0 : options.map(function (option, index) {
    return /*#__PURE__*/React.createElement(View, {
      key: index,
      className: "".concat(prefixCls, "-item")
    }, _typeof(option) === 'object' ? option === null || option === void 0 ? void 0 : option[optionsKey] : option);
  })));
};

export default PickerViewColumn;