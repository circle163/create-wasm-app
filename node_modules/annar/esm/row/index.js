import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useMemo } from 'react';
import { View } from 'remax/one';
import classNames from 'classnames';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('row');

var renderCols = function renderCols(columns, halfGutter) {
  var cols = React.Children.map(columns, function (column) {
    var style = halfGutter ? {
      paddingLeft: "".concat(halfGutter, "px"),
      paddingRight: "".concat(halfGutter, "px")
    } : null;
    return _objectSpread(_objectSpread({}, column), {}, {
      props: _objectSpread(_objectSpread({}, column.props), {}, {
        style: _objectSpread(_objectSpread({}, column.props.style), style)
      })
    });
  });
  return cols;
};

var Row = function Row(props) {
  var _classNames;

  var _props$gutter = props.gutter,
      gutter = _props$gutter === void 0 ? 0 : _props$gutter,
      _props$justify = props.justify,
      justify = _props$justify === void 0 ? 'start' : _props$justify,
      _props$align = props.align,
      align = _props$align === void 0 ? 'top' : _props$align,
      style = props.style,
      className = props.className,
      children = props.children;
  var halfGutter = useMemo(function () {
    return gutter / 2;
  }, [gutter]);
  return /*#__PURE__*/React.createElement(View, {
    className: classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-justify-").concat(justify), justify), _defineProperty(_classNames, "".concat(prefixCls, "-align-").concat(align), align), _classNames), className),
    style: _objectSpread(_objectSpread({}, style), {}, {
      marginLeft: "-".concat(halfGutter, "px"),
      marginRight: "-".concat(halfGutter, "px")
    })
  }, renderCols(children, halfGutter));
};

export default Row;