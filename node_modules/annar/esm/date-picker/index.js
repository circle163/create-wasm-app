import _construct from "@babel/runtime/helpers/esm/construct";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React, { useMemo } from 'react';
import dayjs from 'dayjs';
import Picker from '../picker';
var startYear = new Date().getFullYear();

function getDays(year, month) {
  var days = [];
  month = String(parseInt(month, 10));
  var date = new Date(Number(year), Number(month), 0);
  var maxDay = date.getDate();

  for (var i = 1; i <= maxDay; i++) {
    var day = i < 10 ? '0' + i : String(i);
    days.push(day);
  }

  return days;
}

function getRange(format) {
  var date = new Date();
  var years = [];
  var months = [];
  var range = [];
  var currentYear = startYear;
  var currentMonth = date.getMonth();
  var days = getDays(String(currentYear), String(currentMonth + 1));

  var hours = _toConsumableArray(new Array(24).keys()).map(function (i) {
    return i < 10 ? '0' + i : String(i);
  });

  var minutes = _toConsumableArray(new Array(60).keys()).map(function (i) {
    return i < 10 ? '0' + i : String(i);
  });

  for (var i = currentYear; i <= currentYear + 10; i++) {
    years.push(i);
  }

  for (var _i = 1; _i <= 12; _i++) {
    var month = _i < 10 ? '0' + _i : String(_i);
    months.push(month);
  }

  if (format.includes('YYYY')) {
    range.push(years);
  }

  if (format.includes('MM')) {
    range.push(months);
  }

  if (format.includes('DD')) {
    range.push(days);
  }

  if (format.includes('HH')) {
    range.push(hours);
  }

  if (format.includes('mm')) {
    range.push(minutes);
  }

  return range;
}

function getInitValue(format) {
  return dayjs().format(format);
}

function getFormat(type, format) {
  var rangeFormat = 'YYYY-MM-DD';

  if (format && typeof format === 'string') {
    rangeFormat = format;
  } else {
    if (type === 'date') {
      rangeFormat = 'YYYY-MM-DD';
    }

    if (type === 'time') {
      rangeFormat = 'HH:mm';
    }

    if (type === 'datetime') {
      rangeFormat = 'YYYY-MM-DD HH:mm';
    }
  }

  return rangeFormat;
}

function transformDate2Index(date, format) {
  var o = dayjs(date);
  var indexArray = [];

  if (format.includes('YYYY')) {
    indexArray.push(o.$y - startYear);
  }

  if (format.includes('MM')) {
    indexArray.push(o.$M);
  }

  if (format.includes('DD')) {
    indexArray.push(o.$D - 1);
  }

  if (format.includes('HH')) {
    var hourIndex = date.indexOf(':');
    var H = Number(date.slice(hourIndex - 2, hourIndex));
    indexArray.push(isNaN(o.$H) ? H : o.$H);
  }

  if (format.includes('mm')) {
    var minuteIndex = format.includes('HH') ? date.indexOf(':') + 3 : date.indexOf(':');
    var m = Number(date.slice(minuteIndex - 2, minuteIndex));
    indexArray.push(isNaN(o.$m) ? m : o.$m);
  }

  return indexArray;
}

var DatePicker = function DatePicker(props) {
  var _props$type = props.type,
      type = _props$type === void 0 ? 'date' : _props$type,
      format = props.format,
      _props$value = props.value,
      value = _props$value === void 0 ? getInitValue(getFormat(type, format)) : _props$value,
      disabled = props.disabled,
      children = props.children,
      onChange = props.onChange;
  var rangeFormat = useMemo(function () {
    return getFormat(type, format);
  }, [type, format]);
  var range = useMemo(function () {
    return getRange(rangeFormat);
  }, [rangeFormat]); // const [range, setRange] = useState(getRange(rangeFormat));

  var handleChange = function handleChange(v) {
    var dateArray = v === null || v === void 0 ? void 0 : v.map(function (i, columnIndex) {
      var _range$columnIndex;

      return range === null || range === void 0 ? void 0 : (_range$columnIndex = range[columnIndex]) === null || _range$columnIndex === void 0 ? void 0 : _range$columnIndex[i];
    });

    if (dateArray.length < 5 && rangeFormat.includes('mm')) {
      var filledLength = 5 - dateArray.length;
      var insert = dayjs().format('YYYY-MM-DD').split('-').slice(0, filledLength);
      dateArray.unshift.apply(dateArray, _toConsumableArray(insert));
    }

    dateArray[1] = dateArray[1] - 1; // @ts-ignore

    var date = dayjs(_construct(Date, _toConsumableArray(dateArray))).format(rangeFormat);
    onChange === null || onChange === void 0 ? void 0 : onChange(date);
  };

  var pickerValue = useMemo(function () {
    return transformDate2Index(value, rangeFormat);
  }, [value, rangeFormat]);
  return /*#__PURE__*/React.createElement(Picker, {
    value: pickerValue,
    onChange: handleChange,
    range: range,
    disabled: disabled
  }, children);
};

export default DatePicker;