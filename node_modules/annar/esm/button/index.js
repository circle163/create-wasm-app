import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import * as React from 'react';
import { View, Text, Button } from 'remax/one';
import classNames from 'classnames';
import { tuple } from '../_util';
import Loading from '../loading';
import Icon from '../icon';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('btn');
var ButtonTypes = tuple('default', 'primary');

var AButton = function AButton(props) {
  var _classNames;

  var type = props.type,
      size = props.size,
      className = props.className,
      style = props.style,
      children = props.children,
      onTap = props.onTap,
      disabled = props.disabled,
      danger = props.danger,
      shape = props.shape,
      block = props.block,
      _float = props["float"],
      loading = props.loading,
      loadingText = props.loadingText,
      plain = props.plain,
      hairline = props.hairline,
      look = props.look,
      color = props.color,
      icon = props.icon,
      ghost = props.ghost,
      nativeType = props.nativeType,
      restProps = _objectWithoutProperties(props, ["type", "size", "className", "style", "children", "onTap", "disabled", "danger", "shape", "block", "float", "loading", "loadingText", "plain", "hairline", "look", "color", "icon", "ghost", "nativeType"]);

  var handleTap = function handleTap(e) {
    if (disabled) {
      return;
    }

    if (loading) {
      return;
    }

    onTap === null || onTap === void 0 ? void 0 : onTap(e);
  };

  var renderIcon = function renderIcon(childrenElement) {
    var iconSize = '32px';

    if (size === 'small') {
      iconSize = '28px';
    }

    if (size === 'large') {
      iconSize = '36px';
    }

    var iconColor = '#1890FF';

    if (type === 'primary') {
      iconColor = '#FDFFFD';
    }

    if (plain) {
      if (type === 'primary') {
        iconColor = '#1890FF';
      }

      if (color) {
        iconColor = color;
      }
    }

    if (typeof icon === 'string') {
      return /*#__PURE__*/React.createElement(Icon, {
        type: icon,
        color: iconColor,
        size: iconSize,
        style: {
          verticalAlign: '-0.05em',
          marginRight: childrenElement ? '6px' : undefined
        }
      });
    }

    if ( /*#__PURE__*/React.isValidElement(icon)) {
      var _icon$props;

      return _objectSpread(_objectSpread({}, icon), {}, {
        props: _objectSpread(_objectSpread({}, icon === null || icon === void 0 ? void 0 : icon.props), {}, {
          style: _objectSpread({
            verticalAlign: '-0.05em',
            marginRight: childrenElement ? '6px' : undefined
          }, icon === null || icon === void 0 ? void 0 : (_icon$props = icon.props) === null || _icon$props === void 0 ? void 0 : _icon$props.style)
        })
      });
    }

    return null;
  };

  var classes = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(shape), shape), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size), _defineProperty(_classNames, "".concat(prefixCls, "-primary"), type === 'primary'), _defineProperty(_classNames, "".concat(prefixCls, "-ghost"), ghost), _defineProperty(_classNames, "".concat(prefixCls, "-plain"), plain), _defineProperty(_classNames, "".concat(prefixCls, "-hairline"), hairline), _defineProperty(_classNames, "".concat(prefixCls, "-block"), block), _defineProperty(_classNames, "".concat(prefixCls, "-float"), _float), _defineProperty(_classNames, "".concat(prefixCls, "-float-").concat(_float), _float), _defineProperty(_classNames, "".concat(prefixCls, "-danger-default"), danger), _defineProperty(_classNames, "".concat(prefixCls, "-danger"), type === 'primary' && danger), _defineProperty(_classNames, "".concat(prefixCls, "-look-").concat(look), look), _defineProperty(_classNames, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled || loading), _classNames));
  var childrenElement = loading && loadingText ? loadingText : children;
  var iconElement = renderIcon(childrenElement);
  return /*#__PURE__*/React.createElement(Button, _extends({
    className: classes,
    type: nativeType,
    disabled: disabled,
    onTap: handleTap,
    style: _objectSpread(_objectSpread({}, style), {}, {
      color: color,
      borderColor: color
    })
  }, restProps), loading ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-loading-icon")
  }, /*#__PURE__*/React.createElement(Loading, {
    color: "#FDFFFD",
    radius: "36px",
    style: {
      verticalAlign: '-0.3em'
    }
  })) : iconElement, /*#__PURE__*/React.createElement(Text, {
    className: "".concat(prefixCls, "-text")
  }, childrenElement), /*#__PURE__*/React.createElement(Text, {
    className: "".concat(prefixCls, "-mask")
  }));
};

export default AButton;