import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useState, useEffect, useRef, useImperativeHandle } from 'react';
import { View } from 'remax/one';
import classNames from 'classnames';
import Icon from '../icon';
import { getPrefixCls } from '../common';
var prefixCls = getPrefixCls('ling');

var Ling = function Ling(props, ref) {
  var _classNames;

  var _props$position = props.position,
      position = _props$position === void 0 ? 'top' : _props$position;
  var durationRef = useRef(2000);
  var onCloseRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      config = _useState4[0],
      setConfig = _useState4[1];

  useEffect(function () {
    if (show && durationRef.current !== 0) {
      setTimeout(function () {
        setShow(false);
      }, durationRef.current);
    }

    if (!show) {
      var _onCloseRef$current;

      (_onCloseRef$current = onCloseRef.current) === null || _onCloseRef$current === void 0 ? void 0 : _onCloseRef$current.call(onCloseRef);
    }
  }, [show, durationRef.current, onCloseRef.current]);

  var handleShow = function handleShow(params, duration, onClose) {
    if (typeof params === 'string') {
      setConfig({
        title: params,
        titleColor: '#333'
      });
    }

    if (_typeof(params) === 'object' && params !== null) {
      setConfig(params);
    }

    if (duration || duration === 0) {
      durationRef.current = duration;
    } else {
      durationRef.current = 2000;
    }

    if (onClose && typeof onClose === 'function') {
      onCloseRef.current = onClose;
    }

    setShow(true);
  };

  var handleShowStatus = function handleShowStatus(commonConfig, params, duration, onClose) {
    var config = commonConfig;

    if (typeof params === 'string') {
      config = _objectSpread({
        title: params,
        titleColor: '#333'
      }, commonConfig);
    }

    if (_typeof(params) === 'object' && params !== null) {
      config = _objectSpread(_objectSpread({}, params), commonConfig);
    }

    handleShow(config, duration, onClose);
  };

  useImperativeHandle(ref, function () {
    return {
      show: handleShow,
      info: function info(params, duration, onClose) {
        var infoConfig = {
          icon: 'infofill',
          iconColor: '#1890ff'
        };
        handleShowStatus(infoConfig, params, duration, onClose);
      },
      success: function success(params, duration, onClose) {
        var successConfig = {
          icon: 'roundcheckfill',
          iconColor: '#52c41a'
        };
        handleShowStatus(successConfig, params, duration, onClose);
      },
      warning: function warning(params, duration, onClose) {
        var warningConfig = {
          icon: 'warnfill',
          iconColor: '#faad14'
        };
        handleShowStatus(warningConfig, params, duration, onClose);
      },
      error: function error(params, duration, onClose) {
        var errorConfig = {
          icon: 'roundclosefill',
          iconColor: '#f5222d'
        };
        handleShowStatus(errorConfig, params, duration, onClose);
      }
    };
  });
  var classes = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, "".concat(prefixCls, "-show"), show), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(position), position), _classNames));
  var iconNode = typeof (config === null || config === void 0 ? void 0 : config.icon) === 'string' ? /*#__PURE__*/React.createElement(Icon, {
    type: config === null || config === void 0 ? void 0 : config.icon,
    color: config === null || config === void 0 ? void 0 : config.iconColor,
    size: "52px"
  }) : config === null || config === void 0 ? void 0 : config.icon;
  return /*#__PURE__*/React.createElement(View, {
    className: classes
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-title"),
    style: {
      color: config === null || config === void 0 ? void 0 : config.titleColor
    }
  }, config === null || config === void 0 ? void 0 : config.title), (config === null || config === void 0 ? void 0 : config.content) || (config === null || config === void 0 ? void 0 : config.content) === 0 ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-content")
  }, config === null || config === void 0 ? void 0 : config.content) : null), /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-icon")
  }, iconNode));
};

export default /*#__PURE__*/React.forwardRef(Ling);