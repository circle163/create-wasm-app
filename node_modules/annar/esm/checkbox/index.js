import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import * as React from 'react';
import { View } from 'remax/one';
import { getPrefixCls } from '../common';
import Icon from '../icon';
var prefixCls = getPrefixCls('checkbox');

var Checkbox = function Checkbox(props) {
  var children = props.children,
      checked = props.checked,
      value = props.value,
      extra = props.extra,
      style = props.style,
      onChange = props.onChange;

  var handleClick = function handleClick(e) {
    onChange === null || onChange === void 0 ? void 0 : onChange(!checked, e, value);
  };

  return /*#__PURE__*/React.createElement(View, {
    className: prefixCls,
    style: style
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container"),
    onTap: handleClick
  }, checked ? /*#__PURE__*/React.createElement(Icon, {
    type: "roundcheckfill",
    size: "48px",
    color: "#1890FF"
  }) : /*#__PURE__*/React.createElement(Icon, {
    type: "round",
    size: "48px",
    color: "#999"
  }), children ? /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-container-label")
  }, children) : null), /*#__PURE__*/React.createElement(View, {
    className: "".concat(prefixCls, "-extra")
  }, extra));
};

var getCheckboxs = function getCheckboxs(children) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var onChange = arguments.length > 2 ? arguments[2] : undefined;

  var onGroupChange = function onGroupChange(checked, e, v) {
    var newValue = (value === null || value === void 0 ? void 0 : value.includes(v)) ? value === null || value === void 0 ? void 0 : value.filter(function (i) {
      return i !== v;
    }) : value === null || value === void 0 ? void 0 : value.concat(v);
    onChange === null || onChange === void 0 ? void 0 : onChange(newValue, e);
  };

  var checkboxs = React.Children.map(children, function (checkbox) {
    var p = (checkbox === null || checkbox === void 0 ? void 0 : checkbox.props) || {};
    var checked = p.checked;

    if ((p.value || p.value === 0) && (value === null || value === void 0 ? void 0 : value.includes(p.value))) {
      checked = !checked;
    }

    return _objectSpread(_objectSpread({}, checkbox), {}, {
      props: _objectSpread(_objectSpread({}, checkbox.props), {}, {
        checked: checked,
        onChange: onGroupChange
      })
    });
  });
  return checkboxs;
};

Checkbox.Group = function (props) {
  var _props$value = props.value,
      value = _props$value === void 0 ? [] : _props$value,
      children = props.children,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'row' : _props$direction,
      onChange = props.onChange;
  var checkboxs = getCheckboxs(children, value, onChange);
  return /*#__PURE__*/React.createElement(View, {
    style: {
      display: 'flex',
      flexDirection: direction
    }
  }, checkboxs);
};

export default Checkbox; // 注意不要加 React.memo，会导致保错。