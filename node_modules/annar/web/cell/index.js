"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _web = require("../web");

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = _interopRequireDefault(require("../icon"));

var _formValue = _interopRequireDefault(require("../form-value"));

var _picker = _interopRequireDefault(require("../picker"));

var _input = _interopRequireDefault(require("../input"));

var _common = require("../common");

var prefixCls = (0, _common.getPrefixCls)('cell');

var Cell = function Cell(props) {
  var label = props.label,
      style = props.style,
      labelStyle = props.labelStyle,
      valueStyle = props.valueStyle,
      children = props.children,
      description = props.description,
      verticality = props.verticality,
      icon = props.icon,
      _props$border = props.border,
      border = _props$border === void 0 ? true : _props$border,
      arrow = props.arrow,
      extra = props.extra,
      required = props.required,
      field = props.field,
      _props$defaultNullVal = props.defaultNullValue,
      defaultNullValue = _props$defaultNullVal === void 0 ? '' : _props$defaultNullVal,
      onTap = props.onTap;

  if (verticality) {
    return /*#__PURE__*/React.createElement(_web.View, {
      className: prefixCls,
      style: style,
      onTap: onTap
    }, /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-verticality")
    }, label ? /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-verticality-label"),
      style: labelStyle
    }, required ? /*#__PURE__*/React.createElement(_web.Text, {
      className: "".concat(prefixCls, "-verticality-required")
    }, "*") : null, label) : null, /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-verticality-value"),
      style: valueStyle
    }, children)));
  }

  return /*#__PURE__*/React.createElement(_web.View, {
    className: prefixCls,
    style: style,
    onTap: onTap
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-container-main")
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: (0, _classnames["default"])("".concat(prefixCls, "-container-main-left"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-container-main-left-input"), field))
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-container-main-left-label")
  }, required ? /*#__PURE__*/React.createElement(_web.Text, {
    className: "".concat(prefixCls, "-container-main-left-label-required")
  }, "*") : null, icon ? /*#__PURE__*/React.createElement(_icon["default"], {
    type: icon,
    size: "32px",
    style: {
      marginRight: '10px'
    },
    color: "#333"
  }) : null, label ? /*#__PURE__*/React.createElement(_web.Text, {
    className: "".concat(prefixCls, "-container-main-left-label-value"),
    style: labelStyle
  }, label) : null)), /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-container-main-right")
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-container-main-right-value"),
    style: valueStyle
  }, children || children === 0 ? children : defaultNullValue), extra ? /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-extra")
  }, extra) : null, arrow ? /*#__PURE__*/React.createElement(_icon["default"], {
    type: "right",
    style: {
      marginLeft: '10px'
    },
    color: "#666"
  }) : null)), description ? /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-container-description")
  }, description) : null), border ? /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-border")
  }) : null);
};

Cell.Picker = function (props) {
  var _props$align = props.align,
      align = _props$align === void 0 ? 'left' : _props$align,
      value = props.value,
      onChange = props.onChange,
      placeholder = props.placeholder,
      children = props.children,
      disabled = props.disabled,
      range = props.range,
      _props$rangeKey = props.rangeKey,
      rangeKey = _props$rangeKey === void 0 ? 'text' : _props$rangeKey;
  var selectedText = '';

  if (Array.isArray(value)) {
    var selected = value.map(function (i, columnIndex) {
      var _range$columnIndex;

      return range === null || range === void 0 ? void 0 : (_range$columnIndex = range[columnIndex]) === null || _range$columnIndex === void 0 ? void 0 : _range$columnIndex[i];
    });
    selectedText = selected.map(function (i) {
      return (0, _typeof2["default"])(i) === 'object' ? i[rangeKey] || '' : i;
    }).join(' ');
  } else {
    var _selected = range === null || range === void 0 ? void 0 : range[value];

    selectedText = (0, _typeof2["default"])(_selected) === 'object' ? _selected[rangeKey] || '' : _selected;
  }

  return /*#__PURE__*/React.createElement(Cell, (0, _extends2["default"])({
    labelStyle: {
      width: '180px'
    }
  }, props), /*#__PURE__*/React.createElement(_picker["default"], {
    range: range,
    rangeKey: rangeKey,
    disabled: disabled,
    value: value,
    onChange: onChange
  }, children !== null && children !== void 0 ? children : /*#__PURE__*/React.createElement(_formValue["default"], {
    placeholder: placeholder,
    style: {
      textAlign: align,
      color: disabled ? '#999' : undefined
    }
  }, selectedText)));
};

var defaultInputWrapperStyle = {
  display: 'flex',
  padding: 0,
  border: 0
};
var defaultInputStyle = {
  height: '48px',
  lineHeight: '48px',
  minHeight: '48px'
};

Cell.Input = function (props) {
  return /*#__PURE__*/React.createElement(Cell, (0, _extends2["default"])({
    field: true,
    labelStyle: {
      width: '180px'
    }
  }, props), /*#__PURE__*/React.createElement(_input["default"], (0, _extends2["default"])({}, props, {
    style: defaultInputWrapperStyle,
    inputStyle: defaultInputStyle
  })));
};

var _default = Cell;
exports["default"] = _default;