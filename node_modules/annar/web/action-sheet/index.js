"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _web = require("../web");

var _classnames = _interopRequireDefault(require("classnames"));

var _popup = _interopRequireDefault(require("../popup"));

var _icon = _interopRequireDefault(require("../icon"));

var _common = require("../common");

var prefixCls = (0, _common.getPrefixCls)('action-sheet');

var ActionSheet = function ActionSheet(props) {
  var open = props.open,
      title = props.title,
      actions = props.actions,
      _props$cancelText = props.cancelText,
      cancelText = _props$cancelText === void 0 ? 'Cancel' : _props$cancelText,
      cover = props.cover,
      _props$maskClosable = props.maskClosable,
      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
      onCancel = props.onCancel,
      onChange = props.onChange;

  var handleCancel = function handleCancel(e) {
    onCancel === null || onCancel === void 0 ? void 0 : onCancel(e);
  };

  var handleChange = function handleChange(action, grid, e) {
    onChange === null || onChange === void 0 ? void 0 : onChange(action, grid, e);
  };

  var handleCloseMask = function handleCloseMask() {
    maskClosable && (onCancel === null || onCancel === void 0 ? void 0 : onCancel());
  };

  var renderAction = function renderAction(action) {
    return /*#__PURE__*/_react["default"].createElement(_web.View, {
      key: action.value,
      className: (0, _classnames["default"])("".concat(prefixCls, "-action"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-action-destructive"), action.type === 'destructive')),
      onTap: function onTap(e) {
        return handleChange(action, undefined, e);
      }
    }, action.text);
  };

  var renderGrid = function renderGrid(action) {
    var _action$text;

    return /*#__PURE__*/_react["default"].createElement(_web.View, {
      key: action.value,
      className: (0, _classnames["default"])("".concat(prefixCls, "-grid"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-action-destructive"), action.type === 'destructive'))
    }, /*#__PURE__*/_react["default"].createElement(_web.View, {
      className: "".concat(prefixCls, "-grid-wrapper")
    }, (_action$text = action.text) === null || _action$text === void 0 ? void 0 : _action$text.map(function (item) {
      return /*#__PURE__*/_react["default"].createElement(_web.View, {
        key: item.value,
        className: "".concat(prefixCls, "-grid-item"),
        onTap: function onTap(e) {
          return handleChange(item, action, e);
        }
      }, /*#__PURE__*/_react["default"].createElement(_web.View, {
        className: "".concat(prefixCls, "-grid-item-icon")
      }, item.icon ? /*#__PURE__*/_react["default"].createElement(_icon["default"], {
        type: item.icon,
        size: "48px",
        color: "rgba(0, 0, 0, 0.8)"
      }) : item.name), /*#__PURE__*/_react["default"].createElement(_web.View, {
        className: "".concat(prefixCls, "-grid-item-name")
      }, item.name));
    })));
  };

  return /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: prefixCls
  }, /*#__PURE__*/_react["default"].createElement(_popup["default"], {
    transparent: true,
    position: "bottom",
    open: open,
    onClose: handleCloseMask
  }, /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: (0, _classnames["default"])("".concat(prefixCls, "-container"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-cover"), cover))
  }, /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: "".concat(prefixCls, "-menu")
  }, title ? /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: (0, _classnames["default"])("".concat(prefixCls, "-action"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-title"), true))
  }, title) : null, actions === null || actions === void 0 ? void 0 : actions.map(function (action) {
    return action.mode === 'grid' ? renderGrid(action) : renderAction(action);
  })), /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: "".concat(prefixCls, "-cancel"),
    onTap: handleCancel
  }, cancelText))));
};

var _default = ActionSheet;
exports["default"] = _default;