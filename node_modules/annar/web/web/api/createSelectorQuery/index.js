"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var HTML_NODES = ['[object HTMLCollection]', '[object NodeList]'];

var createSelectorQuery = function createSelectorQuery() {
  var query = {};
  var eles = [];

  query.select = function (selector) {
    var ele = null;
    ele = document.querySelector(selector);
    eles.push(ele);
    return this;
  };

  query.selectAll = function (selector) {
    var ele = [];
    ele = document.querySelectorAll(selector);
    eles.push(ele);
    return this;
  };

  query.boundingClientRect = function () {
    eles = eles.map(function (item) {
      var newItem = item;

      if (HTML_NODES.includes(Object.prototype.toString.call(item))) {
        var htmlArr = [];

        for (var index = 0; index < item.length; index++) {
          htmlArr.push(item[index]);
        }

        newItem = htmlArr.map(function (i) {
          var rect = i.getBoundingClientRect();
          return {
            bottom: rect.bottom,
            height: rect.height,
            // 由于 getBoundingClientRect 方法获取的是相对视窗的，所以这里改写成 i.offsetLeft 来使其相对的元素为最近的position不为static的祖先元素。
            left: i.offsetLeft,
            // rect.left
            right: rect.right,
            top: rect.top,
            width: i.offsetWidth,
            // rect.width
            x: rect.x,
            y: rect.y
          };
        });
      } else {
        var rect = newItem.getBoundingClientRect();
        newItem = {
          bottom: rect.bottom,
          height: rect.height,
          left: newItem.offsetLeft,
          // rect.left
          right: rect.right,
          top: rect.top,
          width: newItem.offsetWidth,
          // rect.width
          x: rect.x,
          y: rect.y
        };
      }

      return newItem;
    });
    return this;
  };

  query.exec = function (callback) {
    callback === null || callback === void 0 ? void 0 : callback(eles);
  };

  return query;
};

var _default = createSelectorQuery;
exports["default"] = _default;