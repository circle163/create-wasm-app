"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _web = require("../web");

var _classnames = _interopRequireDefault(require("classnames"));

var _common = require("../common");

var prefixCls = (0, _common.getPrefixCls)('selector');
var currentParent = null;

var Selector = function Selector(props) {
  var _props$value = props.value,
      value = _props$value === void 0 ? [] : _props$value,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      style = props.style,
      onChange = props.onChange,
      onChangeParentOption = props.onChangeParentOption;

  var _useState = (0, React.useState)([]),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      parentData = _useState2[0],
      setParentData = _useState2[1];

  var _useState3 = (0, React.useState)([]),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      childrenData = _useState4[0],
      setChildrenData = _useState4[1];

  var _useState5 = (0, React.useState)(''),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      activeParent = _useState6[0],
      setActiveParent = _useState6[1];

  (0, React.useEffect)(function () {
    if (options.length > 0) {
      var data = options[0].children || [];
      currentParent = options[0];
      setActiveParent(currentParent.value);
      setParentData(options);
      setChildrenData(data);
    }
  }, [options]);

  var handleClickParentOption = function handleClickParentOption(option) {
    var data = option.children || [];
    currentParent = option;
    setChildrenData(data);
    setActiveParent(option.value);
    onChangeParentOption === null || onChangeParentOption === void 0 ? void 0 : onChangeParentOption(option);
  };

  var handleClickChildrenOption = function handleClickChildrenOption(option) {
    onChange === null || onChange === void 0 ? void 0 : onChange([currentParent.value, option.value], "".concat(currentParent.text, " ").concat(option.text));
  };

  return /*#__PURE__*/React.createElement(_web.View, {
    className: prefixCls,
    style: style
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-parent")
  }, parentData === null || parentData === void 0 ? void 0 : parentData.map(function (option, index) {
    var _classNames;

    return /*#__PURE__*/React.createElement(_web.View, {
      key: option.value,
      className: (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-option"), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-active"), activeParent === option.value), _classNames)),
      onTap: function onTap() {
        handleClickParentOption(option);
      }
    }, option.text, activeParent === option.value && index !== 0 ? /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-option-rounded_top")
    }, /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-option-rounded_top-circle")
    })) : null, activeParent === option.value ? /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-option-rounded_bottom")
    }, /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-option-rounded_bottom-circle")
    })) : null);
  })), /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-children")
  }, childrenData === null || childrenData === void 0 ? void 0 : childrenData.map(function (option) {
    var _classNames2;

    return /*#__PURE__*/React.createElement(_web.View, {
      key: option.value,
      className: (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-option"), true), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-active"), (value === null || value === void 0 ? void 0 : value[1]) === option.value), _classNames2)),
      onTap: function onTap() {
        handleClickChildrenOption(option);
      }
    }, option.text);
  })));
};

var _default = Selector;
exports["default"] = _default;