"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _web = require("../web");

var _classnames = _interopRequireDefault(require("classnames"));

var _util = require("../_util");

var _common = require("../common");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var prefixCls = (0, _common.getPrefixCls)('swiper');

var getChildrenNode = function getChildrenNode(children) {
  var _childrenNode;

  var childrenArray = _react["default"].Children.toArray(children);

  if (childrenArray.length <= 1) {
    return childrenArray;
  }

  var childrenNode = (0, _toConsumableArray2["default"])(childrenArray);
  childrenNode.unshift(childrenArray[childrenArray.length - 1]);
  childrenNode.push(childrenArray[0]);
  childrenNode = (_childrenNode = childrenNode) === null || _childrenNode === void 0 ? void 0 : _childrenNode.map(function (child, index) {
    return _objectSpread(_objectSpread({}, child), {}, {
      key: '.' + index
    });
  });
  return childrenNode;
};

var getIndicatorsNode = function getIndicatorsNode(num, current, position, color, style, look) {
  var defaultColor = undefined;
  var activeColor = undefined;

  if (Array.isArray(color)) {
    if (color[0] && typeof color[0] === 'string') {
      activeColor = color[0];
    }

    if (color[1] && typeof color[1] === 'string') {
      defaultColor = color[1];
    }
  }

  if (look === 'dark') {
    activeColor = '#000';
    defaultColor = 'rgba(0, 0, 0, 0.13)';
  }

  if (look === 'anna') {
    activeColor = '#ff7777';
    defaultColor = 'rgba(255, 119, 119, 0.2)';
  }

  var defaultStyle = {};
  var activeStyle = {};

  if (Array.isArray(style)) {
    if (style[0] && (0, _typeof2["default"])(style[0]) === 'object') {
      activeStyle = style[0];
    }

    if (style[1] && (0, _typeof2["default"])(style[1]) === 'object') {
      defaultStyle = style[1];
    }
  }

  var activeIndex = current - 1;

  if (current === 1) {
    activeIndex = 0;
  }

  if (current === 0) {
    activeIndex = num - 1;
  }

  if (current > num) {
    activeIndex = 0;
  }

  var indicators = (0, _toConsumableArray2["default"])(new Array(num).keys());
  var indicatorsNode = indicators.map(function (i) {
    var _classNames;

    var indicatorStyle = Object.assign({}, activeIndex === i ? activeStyle : defaultStyle, {
      backgroundColor: activeIndex === i ? activeColor : defaultColor
    });
    return /*#__PURE__*/_react["default"].createElement(_web.View, {
      key: i,
      className: (0, _classnames["default"])("".concat(prefixCls, "-indicator"), (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-indicator-").concat(position), position), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-indicator-active"), activeIndex === i), _classNames)),
      style: indicatorStyle
    });
  });
  return indicatorsNode;
};

var InternalSwiper = function InternalSwiper(props) {
  var _classNames2;

  var autoplay = props.autoplay,
      _props$autoplayInterv = props.autoplayInterval,
      autoplayInterval = _props$autoplayInterv === void 0 ? 3000 : _props$autoplayInterv,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 300 : _props$duration,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'square' : _props$shape,
      size = props.size,
      height = props.height,
      vertical = props.vertical,
      _props$curve = props.curve,
      curve = _props$curve === void 0 ? 'ease' : _props$curve,
      _props$showIndicators = props.showIndicators,
      showIndicators = _props$showIndicators === void 0 ? true : _props$showIndicators,
      _props$indicatorLook = props.indicatorLook,
      indicatorLook = _props$indicatorLook === void 0 ? 'light' : _props$indicatorLook,
      indicatorColor = props.indicatorColor,
      indicatorStyle = props.indicatorStyle,
      _props$indicatorPosit = props.indicatorPosition,
      indicatorPosition = _props$indicatorPosit === void 0 ? vertical ? 'right' : 'bottom' : _props$indicatorPosit,
      style = props.style,
      children = props.children; // Make Special treatment when the number of childNodes is 1

  var childrenArray = (0, _react.useMemo)(function () {
    return _react["default"].Children.toArray(children);
  }, [children]);
  var startPoint = (0, _react.useRef)(0);
  var startTime = (0, _react.useRef)(0);
  var sideLength = (0, _react.useRef)(0);
  var swiperId = (0, _react.useRef)((0, _util.guid)());
  var swiperWidth = (0, _react.useRef)(0);
  var swiperHeight = (0, _react.useRef)(0);
  var swiperItemIndex = (0, _react.useRef)(childrenArray.length > 1 ? 1 : 0);
  var origin = (0, _react.useRef)(0);
  var intervalId = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      distance = _useState2[0],
      setDistance = _useState2[1];

  var _useState3 = (0, _react.useState)('none'),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      transition = _useState4[0],
      setTransition = _useState4[1];

  (0, _react.useEffect)(function () {
    var getSwiperWidth = function getSwiperWidth() {
      (0, _web.createSelectorQuery)() // @ts-ignore
      .select(".".concat(prefixCls, "-id-").concat(swiperId.current)).boundingClientRect().exec(function (rect) {
        var node = Array.isArray(rect) ? rect === null || rect === void 0 ? void 0 : rect[0] : rect;
        swiperWidth.current = node === null || node === void 0 ? void 0 : node.width;
        swiperHeight.current = node === null || node === void 0 ? void 0 : node.height;

        if (vertical) {
          sideLength.current = node === null || node === void 0 ? void 0 : node.height;
        } else {
          sideLength.current = node === null || node === void 0 ? void 0 : node.width;
        }

        if (childrenArray.length > 1) {
          origin.current = -sideLength.current;
          setDistance(origin.current);
        }
      });
    };

    getSwiperWidth();
    return function () {
      clearInterval(intervalId.current);
    };
  }, []); // Seamless switching

  (0, _react.useEffect)(function () {
    // if (distance !== (childrenArray.length + 1) * -sideLength.current) {
    //   return;
    // }
    if (swiperItemIndex.current === 0) {
      setTimeout(function () {
        swiperItemIndex.current = childrenArray.length;
        origin.current = swiperItemIndex.current * -sideLength.current;
        setDistance(origin.current);
        setTransition('none');
      }, duration); // Extend 300ms and set the transition to none
    }

    if (swiperItemIndex.current > childrenArray.length) {
      setTimeout(function () {
        swiperItemIndex.current = 1;
        origin.current = swiperItemIndex.current * -sideLength.current;
        setDistance(origin.current);
        setTransition('none');
      }, duration); // Extend 300ms and set the transition to none
    }
  }, [swiperItemIndex.current, duration, distance]); // move

  var move = (0, _react.useCallback)(function (direction) {
    if (direction === 'left') {
      swiperItemIndex.current = swiperItemIndex.current + 1;
    }

    if (direction === 'right') {
      swiperItemIndex.current = swiperItemIndex.current - 1;
    }

    origin.current = swiperItemIndex.current * -sideLength.current;
    setDistance(origin.current);
    setTransition("all ".concat(duration / 1000, "s ").concat(curve));
  }, [swiperItemIndex.current, sideLength.current, duration]); // control autoplay

  var controlAutoplay = (0, _react.useCallback)(function (action) {
    if (action === 'start') {
      if (autoplay && !intervalId.current) {
        intervalId.current = setInterval(function () {
          move('left');
        }, autoplayInterval);
      }
    }

    if (action === 'stop') {
      if (intervalId.current) {
        clearInterval(intervalId.current);
        intervalId.current = null;
      }
    }
  }, [autoplay, autoplayInterval, intervalId.current]); // autoplay

  (0, _react.useEffect)(function () {
    if (!autoplay) {
      controlAutoplay('stop');
    }

    if (intervalId.current) {
      return;
    }

    if (autoplay) {
      controlAutoplay('start');
    }
  }, [autoplay, intervalId.current]);
  var throttleTouchMove = (0, _react.useCallback)((0, _util.throttle)(function (e) {
    var touch = e.touches[0];
    var diff = (vertical ? touch.pageY : touch.pageX) - startPoint.current;
    var currDistance = diff + origin.current;

    if (currDistance) {
      setDistance(currDistance);
      setTransition('none');
    }
  }, 10, {
    trailing: false
  }), [startPoint.current, origin.current]);

  var handleTouchStart = function handleTouchStart(e) {
    if (childrenArray.length <= 1) {
      return;
    }

    controlAutoplay('stop');
    var touch = e.touches[0];
    startPoint.current = vertical ? touch.pageY : touch.pageX;
    startTime.current = Date.now();
  };

  var handleTouchMove = function handleTouchMove(e) {
    if (childrenArray.length <= 1) {
      return;
    } // @ts-ignore


    throttleTouchMove(e);
  };

  var handleTouchEnd = function handleTouchEnd(e) {
    if (childrenArray.length <= 1) {
      return;
    }

    var touch = e.changedTouches[0] || e.nativeEvent.changedTouches[0];
    var diff = (vertical ? touch.pageY : touch.pageX) - startPoint.current;
    var speed = diff / (Date.now() - startTime.current);
    var harfSideLength = sideLength.current / 2;
    console.log('speed', speed);

    if (Math.abs(speed) > 0.3) {
      if (diff > 0) {
        move('right');
      }

      if (diff < 0) {
        move('left');
      }
    } else if (harfSideLength < Math.abs(diff)) {
      if (diff > 0) {
        move('right');
      }

      if (diff < 0) {
        move('left');
      }
    } else {
      move();
    }

    controlAutoplay('start');
  };

  var handleTouchCancel = function handleTouchCancel() {
    if (childrenArray.length <= 1) {
      return;
    }

    move();
  };

  var childrenNode = (0, _react.useMemo)(function () {
    return getChildrenNode(children);
  }, [children]);
  var indicatorsNode = (0, _react.useMemo)(function () {
    return getIndicatorsNode(childrenArray.length, swiperItemIndex.current, indicatorPosition, indicatorColor, indicatorStyle, indicatorLook);
  }, [childrenArray.length, swiperItemIndex.current, indicatorPosition, indicatorColor, indicatorStyle, indicatorLook]);
  var classes = (0, _classnames["default"])(prefixCls, (_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-id-").concat(swiperId.current), true), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-").concat(shape), shape), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-").concat(size), size), _classNames2));
  return /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: classes,
    style: _objectSpread(_objectSpread({}, style), {}, {
      height: height,
      borderRadius: shape === 'round' ? swiperHeight.current : undefined
    })
  }, /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: (0, _classnames["default"])("".concat(prefixCls, "-track"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-track-vertical"), vertical)),
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd,
    onTouchCancel: handleTouchCancel,
    style: {
      transform: "translate3d(".concat(vertical ? '0, ' + distance + 'PX' : distance + 'PX, 0', ", 0)"),
      transition: transition
    }
  }, childrenNode), showIndicators ? /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: (0, _classnames["default"])("".concat(prefixCls, "-indicators"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-indicators-").concat(indicatorPosition), indicatorPosition))
  }, indicatorsNode) : null);
};

var _default = InternalSwiper;
exports["default"] = _default;