"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _web = require("../web");

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = _interopRequireDefault(require("../icon"));

var _common = require("../common");

var prefixCls = (0, _common.getPrefixCls)('search_bar');
var showBtn = false;

var SearchBar = function SearchBar(props) {
  var _classNames, _classNames3, _classNames4;

  var value = props.value,
      placeholder = props.placeholder,
      onInput = props.onInput,
      onClear = props.onClear,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onActionClick = props.onActionClick,
      onSubmit = props.onSubmit,
      inputStyle = props.inputStyle,
      shape = props.shape,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      _props$confirmType = props.confirmType,
      confirmType = _props$confirmType === void 0 ? 'search' : _props$confirmType,
      style = props.style,
      focus = props.focus,
      _props$actionName = props.actionName,
      actionName = _props$actionName === void 0 ? '取消' : _props$actionName,
      keepShowActionButton = props.keepShowActionButton,
      hideActionButton = props.hideActionButton,
      size = props.size;

  var _useState = (0, React.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isFocus = _useState2[0],
      setIsFocus = _useState2[1];

  var handleFocus = function handleFocus(e) {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    setIsFocus(true);
  };

  var handleBlur = function handleBlur(e) {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    setIsFocus(false);
  };

  var handleInput = function handleInput(e) {
    onInput === null || onInput === void 0 ? void 0 : onInput(e.target.value);
  };

  var handleClear = function handleClear() {
    onClear === null || onClear === void 0 ? void 0 : onClear(value);
  };

  var handleActionClick = function handleActionClick() {
    showBtn = false;
    onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick();
  };

  var handleConfirm = function handleConfirm(e) {
    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(e.target.value);
  };

  var active = isFocus || value || focus;

  if (active && !showBtn) {
    showBtn = true;
  }

  var iconSize = '32px';

  if (size === 'large') {
    iconSize = '36px';
  }

  if (size === 'small') {
    iconSize = '28px';
  }

  return /*#__PURE__*/React.createElement(_web.View, {
    className: (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, prefixCls, true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-large"), size === 'large'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-small"), size === 'small'), _classNames)),
    style: style
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: (0, _classnames["default"])("".concat(prefixCls, "-input"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-input-").concat(shape), shape)),
    style: inputStyle
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: (0, _classnames["default"])((_classNames3 = {}, (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-input-synthetic"), true), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-input-is_left"), active), _classNames3))
  }, /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-input-synthetic-icon")
  }, /*#__PURE__*/React.createElement(_icon["default"], {
    type: "search",
    size: iconSize,
    color: "#999"
  })), /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-input-synthetic-placeholder"),
    style: {
      visibility: active ? 'hidden' : 'visible'
    }
  }, placeholder)), /*#__PURE__*/React.createElement(_web.Input, {
    className: "".concat(prefixCls, "-input-value") // @ts-ignore
    ,
    type: type,
    confirmType: confirmType,
    value: value,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onInput: handleInput,
    onConfirm: handleConfirm,
    focus: focus
  }), /*#__PURE__*/React.createElement(_web.View, {
    className: "".concat(prefixCls, "-input-clear"),
    onTap: handleClear
  }, /*#__PURE__*/React.createElement(_icon["default"], {
    type: "roundclosefill",
    size: "".concat(iconSize, "px"),
    color: "#999",
    style: {
      visibility: value ? 'visible' : 'hidden'
    }
  }))), !hideActionButton ? /*#__PURE__*/React.createElement(_web.View, {
    className: (0, _classnames["default"])((_classNames4 = {}, (0, _defineProperty2["default"])(_classNames4, "".concat(prefixCls, "-action_button"), true), (0, _defineProperty2["default"])(_classNames4, "".concat(prefixCls, "-show_action_button"), keepShowActionButton ? true : active), _classNames4)),
    onTap: handleActionClick
  }, actionName) : null);
};

var _default = SearchBar;
exports["default"] = _default;