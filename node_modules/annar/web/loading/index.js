"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _web = require("../web");

var _common = require("../common");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var prefixCls = (0, _common.getPrefixCls)('loading');

var Loading = function Loading(props) {
  var style = props.style,
      type = props.type,
      _props$color = props.color,
      color = _props$color === void 0 ? '#999' : _props$color,
      _props$gapColor = props.gapColor,
      gapColor = _props$gapColor === void 0 ? '#FDFFFD' : _props$gapColor,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? '42px' : _props$radius;

  if (type === 'gap') {
    return /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-gap"),
      style: {
        height: radius,
        width: radius,
        border: "2px solid ".concat(color)
      }
    }, /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-gap-fill"),
      style: {
        backgroundColor: gapColor
      }
    }));
  }

  if (type === 'wave') {
    return /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-wave")
    }, /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }), /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }), /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }), /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }), /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }));
  }

  if (type === 'anna') {
    return /*#__PURE__*/React.createElement(_web.View, {
      className: "".concat(prefixCls, "-anna")
    }, /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }), /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }), /*#__PURE__*/React.createElement(_web.View, {
      style: {
        backgroundColor: color
      }
    }));
  }

  return /*#__PURE__*/React.createElement(_web.View, {
    className: prefixCls,
    style: _objectSpread(_objectSpread({}, style), {}, {
      height: radius,
      width: radius,
      borderColor: "".concat(color, " ").concat(color, " transparent")
    })
  });
};

var _default = Loading;
exports["default"] = _default;