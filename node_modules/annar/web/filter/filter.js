"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _web = require("../web");

var _mask = _interopRequireDefault(require("../mask"));

var _item = _interopRequireDefault(require("./item"));

var _common = require("../common");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var prefixCls = (0, _common.getPrefixCls)('filter');

var InternalFilter = function InternalFilter(props) {
  var filterRef = (0, _react.useRef)([]);
  var style = props.style,
      zIndex = props.zIndex,
      children = props.children;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      showMask = _useState2[0],
      setShowMask = _useState2[1];

  var hanldeShowMask = function hanldeShowMask(value) {
    setShowMask(value);
  };

  var handleTapItem = function handleTapItem(value, index, tapCb) {
    filterRef.current.forEach(function (item, cindex) {
      if (index !== cindex) {
        item.current.close();
      }
    });

    if (value) {
      setShowMask(true);
    } else {
      setShowMask(false);
    }

    tapCb === null || tapCb === void 0 ? void 0 : tapCb();
  };

  var hanldeTapMask = function hanldeTapMask() {
    filterRef.current.forEach(function (item) {
      item.current.close();
    });
    setShowMask(false);
  };

  var filterItems = _react["default"].Children.map(children, function (filterItem, index) {
    var itemRef = (0, _react.useRef)();
    filterRef.current[index] = itemRef;

    if (filterItem.ref) {
      filterRef.current[index] = filterItem.ref;
    }

    return /*#__PURE__*/_react["default"].createElement(_item["default"], (0, _extends2["default"])({}, filterItem.props, {
      ref: filterRef.current[index],
      onTap: function onTap(v) {
        var _filterItem$props;

        return handleTapItem(v, index, (_filterItem$props = filterItem.props) === null || _filterItem$props === void 0 ? void 0 : _filterItem$props.onTap);
      },
      onShowMask: hanldeShowMask,
      id: index
    }));
  });

  var isAddZIndex = zIndex || zIndex === 0;
  var filterStyle = style;

  if (isAddZIndex) {
    filterStyle = _objectSpread(_objectSpread({}, style), {}, {
      zIndex: zIndex
    });
  }

  return /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: prefixCls,
    style: filterStyle
  }, /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: "".concat(prefixCls, "-content"),
    style: {
      height: showMask ? '100%' : '100px'
    }
  }, /*#__PURE__*/_react["default"].createElement(_web.View, {
    className: "".concat(prefixCls, "-items")
  }, filterItems)), /*#__PURE__*/_react["default"].createElement(_mask["default"], {
    show: showMask,
    onTap: hanldeTapMask,
    style: {
      top: 'unset',
      bottom: 'unset',
      height: '100%'
    },
    zIndex: 0
  }));
};

var _default = InternalFilter; // {/* mask必须放到items的后面,否则会导致动画transition失效 */}

exports["default"] = _default;