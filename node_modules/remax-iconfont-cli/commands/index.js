#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_1 = tslib_1.__importDefault(require("fs"));
var path_1 = tslib_1.__importDefault(require("path"));
var glob_1 = tslib_1.__importDefault(require("glob"));
var colors_1 = tslib_1.__importDefault(require("colors"));
var mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
var getConfig_1 = require("../libs/getConfig");
var iconfont_parser_1 = require("iconfont-parser");
var maps_1 = require("../libs/maps");
var filterConfig_1 = require("../libs/filterConfig");
var generateUsingComponent_1 = require("../libs/generateUsingComponent");
var getIconNames_1 = require("../libs/getIconNames");
var basePath = path_1.default.join(__dirname, '..');
var miniProgramBasePath = 'node_modules/mini-program-iconfont-cli';
var miniProgramDir = fs_1.default.existsSync(path_1.default.join(basePath, miniProgramBasePath))
    ? path_1.default.join(basePath, miniProgramBasePath)
    : path_1.default.resolve(miniProgramBasePath);
var config = getConfig_1.getConfig();
iconfont_parser_1.fetchXml(config.symbol_url).then(function (result) {
    if (!config.platforms.length) {
        console.warn("\nPlatform is required.\n");
        return;
    }
    mkdirp_1.default.sync(config.save_dir);
    glob_1.default.sync(path_1.default.resolve(config.save_dir, '*')).forEach(function (dirOrFile) {
        if (fs_1.default.statSync(dirOrFile).isDirectory()) {
            glob_1.default.sync(path_1.default.resolve(dirOrFile, '*')).forEach(function (file) { return fs_1.default.unlinkSync(file); });
            fs_1.default.rmdirSync(dirOrFile);
        }
        else {
            fs_1.default.unlinkSync(dirOrFile);
        }
    });
    var iconNames = getIconNames_1.getIconNames(result, config);
    generateUsingComponent_1.generateUsingComponent(config, iconNames);
    config.platforms.forEach(function (platform) {
        var execFile = maps_1.PLATFORM_MAP[platform];
        if (!execFile) {
            console.warn("\nThe platform " + colors_1.default.red(platform) + " is not exist.\n");
            return;
        }
        execFile = path_1.default.join.apply(path_1.default, tslib_1.__spread(execFile.split('/')));
        console.log("\nCreating icons for platform " + colors_1.default.green(platform) + "\n");
        var execMethod = path_1.default.basename(execFile);
        if (execFile.indexOf('mini-program-iconfont-cli') >= 0) {
            execFile = execFile.replace(/mini-program-iconfont-cli/, miniProgramDir);
            require(execFile)[execMethod](result, filterConfig_1.filterMiniProgramConfig(config, platform));
        }
        generateUsingComponent_1.generateUsingComponent(config, iconNames, platform);
    });
}).catch(function (e) {
    console.error(colors_1.default.red(e.message || 'Unknown Error'));
    process.exit(1);
});
